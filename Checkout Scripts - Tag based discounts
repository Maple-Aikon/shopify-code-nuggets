class S;def initialize(rs);@rules = rs;end;def m(cart, line_item);@rules.any? { |and_clause| and_clause.all? { |r| matches_rule_condition?(r[:c], r[:rlt], r[:condition].strip.upcase, cart, line_item) } };end;def matches_rule_condition?(c, rlt, condition, cart, line_item);false;end;end;class LIS < S;def matches_rule_condition?(c, rlt, condition, cart, line_item);case c;when 'variant.product.id';line_item.variant.product.id.to_s === condition;when 'variant.product.tags';case rlt;when 'is_not_equal_to';(line_item.variant.product.tags.map(&:upcase) & [condition]).empty?;else;!(line_item.variant.product.tags.map(&:upcase) & [condition]).empty?;end;when 'variant.product.product_type';line_item.variant.product.product_type.upcase === condition;when 'variant.product.vendor';line_item.variant.product.vendor.upcase === condition;else;false;end;end;end;class CS < S;def matches_rule_condition?(c, rlt, condition, cart, line_item);return false if cart.customer.nil?;case c;when 'email';cart.customer.email === condition;when 'tags';case rlt;when 'is_not_equal_to';(cart.customer.tags.map(&:upcase) & [condition]).empty?;else;!(cart.customer.tags.map(&:upcase) & [condition]).empty?;end;when 'orders_count';case rlt;when 'is_greater_than';cart.customer.orders_count > condition.to_i;else;cart.customer.orders_count < condition.to_i;end;when 'accepts_marketing?';cart.customer.accepts_marketing? === (condition === '1');else;false;end;end;end;class D;def initialize(message);@m = message;end;def a(line_item);new_line_price = get_new_line_price(line_item);if new_line_price <= line_item.line_price;line_item.change_line_price(new_line_price, message: @m);end;end;def get_new_line_price(line_item);line_item.line_price;end;def self.from_discount_options(discount_options);case discount_options[:dt];when 'percentage';PD.new(discount_options[:dp] || discount_options[:percentage], discount_options[:dm] || discount_options[:message]);when 'amount';AmountDiscount.new(discount_options[:discount_amount] || discount_options[:amount], discount_options[:dm] || discount_options[:message]);when 'fixed_price';FixedPriceDiscount.new(discount_options[:discount_fixed_price] || discount_options[:fixed_price], discount_options[:dm] || discount_options[:message]);else;nil;end;end;end;class PD < D;def initialize(percentage, message);@pc = Decimal.new(percentage) / 100.0;super(message);end;def get_new_line_price(line_item);line_discount = line_item.original_line_price * @pc;line_item.original_line_price - line_discount;end;end;class AmountDiscount < D;def initialize(amount, message);@amount = Money.new(cents: amount);super(message);end;def get_new_line_price(line_item);line_item.original_line_price - @amount;end;end;class FixedPriceDiscount < D;def initialize(fixed_price, message);@fixed_price = Money.new(cents: fixed_price);super(message);end;def get_new_line_price(line_item);@fixed_price * line_item.quantity;end;end;class BP;def initialize(bs, bq, gs, gq, gl, discount_preference);@bs = bs;@bq = bq;@gs = gs;@gq = gq;@gl = gl;@discount_preference = discount_preference;end;def p(cart);dis = [];cs = cc(cart, cart.line_items);eligible_items = cart.line_items.select { |im| @gs.m(cart, im) }.sort_by { |im| get_item_sort_value(im) };credit_distribution = calculate_credit_distribution(eligible_items, cs);eligible_items.each_with_index do |im, index|;item_credits = credit_distribution[index];next if item_credits <= 0;if item_credits == im.quantity;dis.push(im);elsif item_credits < im.quantity;di = im.split(take: item_credits);position = cart.line_items.find_index(im);cart.line_items.insert(position + 1, di);dis.push(di);end;end;dis;end;private;def cc(cart, is);b = x = g = 0;is.each do |im|;if @bs.m(cart, im);if @gs.m(cart, im);x += im.quantity;else;b += im.quantity;end;elsif @gs.m(cart, im);g += im.quantity;end;end;return [g, @gl].min if (@bq == 0);return 0 if (b == 0) and (x == 0);[@gq * ((((@bq * (g + x) - (@gq * b)) / (@gq + @bq)) + b) / @bq).floor, @gl].min;end;def calculate_credit_distribution(is, cs);available_credits = cs;credit_remainder = 0;is.map do |im|;item_credits = [(im.quantity + credit_remainder) / distribution_nth, available_credits].min;available_credits -= item_credits;credit_remainder = (im.quantity + credit_remainder) % distribution_nth;item_credits;end;end;def get_item_sort_value(im);case @discount_preference;when 'descending', 'nth_descending';-im.variant.price;else;im.variant.price;end;end;def distribution_nth;@distribution_nth ||= case @discount_preference;when 'nth_ascending', 'nth_descending';@bq + @gq;else;1;end;end;end;class TP;def initialize(s, group_by);@selector = s;@group_by = group_by;end;def p(cart);index = 0;cart.line_items.group_by do |line_item|;if line_item_is_eligible?(cart, line_item);index += 1;group_key(line_item, index);else;nil;end;end;end;private;def line_item_is_eligible?(cart, line_item);@selector.nil? or @selector.m(cart, line_item);end;def group_key(line_item, index);case @group_by;when 'none';'none';when 'product';line_item.variant.product.id;when 'variant';line_item.variant.id;else;index;end;end;end;class C;def initialize(os = {});@os = os;end;def run(cart);end;end;class BC < C;def run(cart);return unless @os[:discount_code].nil? or (!cart.discount_code.nil? and (cart.discount_code.code == @os[:discount_code]));return unless @os[:minimum_spend].nil? or (cart.subtotal_price >= Money.new(cents: @os[:minimum_spend]));ptr = BP.new(LIS.new(@os[:brs]), @os[:bq], LIS.new(@os[:grs]), @os[:gq], @os[:gl], @os[:discount_preference]);discount = D.from_discount_options(@os);dis = ptr.p(cart);dis.each do |line_item|;discount.a(line_item);end;end;end;class BundleCampaign < C;def run(cart, eligible_line_items);return [] if eligible_line_items.empty?;return [] unless @os[:discount_code].nil? or (!cart.discount_code.nil? and (cart.discount_code.code == @os[:discount_code]));return [] unless @os[:minimum_spend].nil? or (cart.subtotal_price >= Money.new(cents: @os[:minimum_spend]));component_discounts = [];matrix = @os[:components].map do |component|;s = LIS.new(component[:rs]);component_discounts << D.from_discount_options(component[:discount]);eligible_line_items.map do |line_item|;s.m(cart, line_item) ? line_item.quantity : 0;end;end;max_bundle_instances = matrix.map { |component| component.reduce(0, :+) }.min;return eligible_line_items unless (max_bundle_instances > 0);take_matrices = [];line_item_matrix = eligible_line_items.map { |_| matrix.map { 0 } };(1..max_bundle_instances).each do |n|;quantity_taken = eligible_line_items.map { 0 };take_matrix = [];matrix.each_with_index do |line_items, y|;quantity_required = @os[:components][y][:quantity].to_i;quantity_remaining = quantity_required;take_matrix_line = [];line_items.each_with_index do |quantity_available, x|;quantity_to_take = [[quantity_available - quantity_taken[x], 0].max, quantity_remaining].min;quantity_remaining -= quantity_to_take;quantity_taken[x] += quantity_to_take;take_matrix_line << quantity_to_take;end;take_matrix << take_matrix_line;end;break unless is_valid_take_matrix?(@os[:components], take_matrix);take_matrices << take_matrix;take_matrix.each_with_index do |line_items, y|;line_items.each_with_index do |quantity, x|;matrix[y][x] = [matrix[y][x] - quantity_taken[x], 0].max;line_item_matrix[x][y] += quantity;end;end;end;return eligible_line_items if take_matrices.empty?;bundle_line_items = [];line_item_matrix.each_with_index do |components, x|;components.each_with_index do |quantity, y|;next if quantity == 0;if eligible_line_items[x].quantity > quantity;bundle_line_item = eligible_line_items[x].split(take: quantity);cart.line_items << bundle_line_item;else;bundle_line_item = eligible_line_items[x];end;unless component_discounts[y].nil?;component_discounts[y].a(bundle_line_item);end;bundle_line_items << bundle_line_item;end;end;eligible_line_items.reject { |eligible_line_item| bundle_line_items.include?(eligible_line_item) };end;private;def is_valid_take_matrix?(components, take_matrix);take_matrix_valid_lines = [];take_matrix.each_with_index do |line_items, y|;take_matrix_valid_lines << (line_items.reduce(0, :+) == components[y][:quantity]);end;take_matrix_valid_lines.all?;end;end;class PL < C;def run(cart);return unless @os[:discount_code].nil? or (!cart.discount_code.nil? and (cart.discount_code.code == @os[:discount_code]));return unless @os[:minimum_spend].nil? or (cart.subtotal_price >= Money.new(cents: @os[:minimum_spend]));return unless cart_is_eligible?(cart);ptr = TP.new(@os[:product_rules].empty? ? nil : LIS.new(@os[:product_rules]), @os[:group_by]);ptr.p(cart).each do |k, is|;next if k.nil?;gtm = (@os[:threshold_type] === 'value') ? :line_price : :quantity;gt = is.map(&gtm).reduce(gtm === :line_price ? Money.zero : 0, :+);at = ft(gtm, gt);unless at.nil?;atd(is, at);end;end;end;private;def cart_is_eligible?(cart);@os[:cr].empty? or CS.new(@os[:cr]).m(cart, nil);end;def ft(gtm, total);@os[:tiers].select do |tier|;if gtm === :line_price;Money.new(cents: tier[:threshold_value].to_i) <= total;else;tier[:threshold_value].to_i <= total;end;end.last;end;def atd(is, tier);discount = gtd(tier);is.each do |im|;discount.a(im);end;end;def gtd(tier);PD.new(tier[:discount_value], @os[:dm].gsub('{{ discount_percentage }}', tier[:discount_value].to_i.to_s));end;end;PL.new({:tiers=>[{:discount_value=>"37.5", :threshold_value=>"0.0"}], :group_by=>"none", :dt=>"percentage", :product_rules=>[[{:c=>"variant.product.vendor", :rlt=>"ieq", :condition=>"Progenex"}]], :cr=>[[{:c=>"tags", :rlt=>"ieq", :condition=>"Wholesale Buyer 37"}]], :threshold_type=>"value", :dm=>"{{ discount_percentage }}% off!", :discount_code=>nil, :minimum_spend=>nil}).run(Input.cart);PL.new({:tiers=>[{:discount_value=>"35", :threshold_value=>"0.0"}], :group_by=>"none", :discount_code=>nil, :dt=>"percentage", :product_rules=>[[{:c=>"variant.product.vendor", :rlt=>"ieq", :condition=>"Progenex"}]], :cr=>[[{:c=>"tags", :rlt=>"ieq", :condition=>"Wholesale Buyer 35"}]], :threshold_type=>"value", :dm=>"{{ discount_percentage }}% off!", :minimum_spend=>nil}).run(Input.cart);PL.new({:tiers=>[{:discount_value=>"10", :threshold_value=>"0.0"}], :group_by=>"none", :discount_code=>nil, :dt=>"percentage", :product_rules=>[[{:c=>"variant.product.vendor", :rlt=>"ieq", :condition=>"Progenex"}]], :cr=>[[{:c=>"tags", :rlt=>"ieq", :condition=>"Street Parking"}]], :threshold_type=>"value", :dm=>"{{ discount_percentage }}% off!", :minimum_spend=>nil}).run(Input.cart);PL.new({:tiers=>[{:discount_value=>"20", :threshold_value=>"0.0"}, {:discount_value=>"30", :threshold_value=>"714.00"}], :group_by=>"none", :discount_code=>nil, :dt=>"percentage", :product_rules=>[[{:c=>"variant.product.vendor", :rlt=>"ieq", :condition=>"Progenex"}]], :cr=>[[{:c=>"tags", :rlt=>"ieq", :condition=>"Affiliate"}]], :threshold_type=>"value", :dm=>"{{ discount_percentage }}% off!", :minimum_spend=>nil}).run(Input.cart);PL.new({:tiers=>[{:discount_value=>"42", :threshold_value=>"0.0"}], :group_by=>"none", :discount_code=>nil, :dt=>"percentage", :product_rules=>[[{:c=>"variant.product.vendor", :rlt=>"ieq", :condition=>"Progenex"}]], :cr=>[[{:c=>"tags", :rlt=>"ieq", :condition=>"School"}]], :threshold_type=>"value", :dm=>"{{ discount_percentage }}% off!", :minimum_spend=>nil}).run(Input.cart);PL.new({:tiers=>[{:discount_value=>"32.5", :threshold_value=>"0.0"}], :group_by=>"none", :discount_code=>nil, :dt=>"percentage", :product_rules=>[[{:c=>"variant.product.vendor", :rlt=>"ieq", :condition=>"Progenex"}]], :cr=>[[{:c=>"tags", :rlt=>"ieq", :condition=>"Wholesale Buyer 32.5"}]], :threshold_type=>"value", :dm=>"{{ discount_percentage }}% off!", :minimum_spend=>nil}).run(Input.cart);PL.new({:tiers=>[{:discount_value=>"30", :threshold_value=>"0.0"}], :group_by=>"none", :dt=>"percentage", :product_rules=>[[{:c=>"variant.product.vendor", :rlt=>"ieq", :condition=>"Progenex"}]], :cr=>[[{:c=>"tags", :rlt=>"ieq", :condition=>"First Responder"}], [{:c=>"tags", :rlt=>"ieq", :condition=>"Wholesale Buyer 30"}], [{:c=>"tags", :rlt=>"ieq", :condition=>"Free Product Monthly"}]], :threshold_type=>"value", :dm=>"{{ discount_percentage }}% off!", :discount_code=>nil, :minimum_spend=>nil}).run(Input.cart);PL.new({:tiers=>[{:discount_value=>"20", :threshold_value=>"0.0"}], :group_by=>"none", :dt=>"percentage", :product_rules=>[[{:c=>"variant.product.vendor", :rlt=>"ieq", :condition=>"Progenex"}]], :cr=>[[{:c=>"tags", :rlt=>"ieq", :condition=>"Friends And Family"}], [{:c=>"tags", :rlt=>"ieq", :condition=>"Partner"}], [{:c=>"tags", :rlt=>"ieq", :condition=>"Military"}], [{:c=>"tags", :rlt=>"ieq", :condition=>"Wholesale Buyer 20"}], [{:c=>"tags", :rlt=>"ieq", :condition=>"Investors & Others"}], [{:c=>"tags", :rlt=>"ieq", :condition=>"Street Parking"}]], :threshold_type=>"value", :dm=>"{{ discount_percentage }}% off!", :discount_code=>nil, :minimum_spend=>nil}).run(Input.cart);PL.new({:tiers=>[{:discount_value=>"25", :threshold_value=>"0.0"}], :group_by=>"none", :dt=>"percentage", :product_rules=>[[{:c=>"variant.product.vendor", :rlt=>"ieq", :condition=>"Progenex"}]], :cr=>[[{:c=>"tags", :rlt=>"ieq", :condition=>"Wholesale Buyer 25"}], [{:c=>"tags", :rlt=>"ieq", :condition=>"BLK"}], [{:c=>"tags", :rlt=>"ieq", :condition=>"Experticty"}]], :threshold_type=>"value", :dm=>"{{ discount_percentage }}% off!", :discount_code=>nil, :minimum_spend=>nil}).run(Input.cart);PL.new({:tiers=>[{:discount_value=>"30", :threshold_value=>"0.0"}, {:discount_value=>"37.5", :threshold_value=>"714"}], :group_by=>"none", :discount_code=>nil, :dt=>"percentage", :product_rules=>[[{:c=>"variant.product.vendor", :rlt=>"ieq", :condition=>"Progenex"}]], :cr=>[[{:c=>"tags", :rlt=>"ieq", :condition=>"IronTribe"}]], :threshold_type=>"value", :dm=>"{{ discount_percentage }}% off!", :minimum_spend=>nil}).run(Input.cart);PL.new({:tiers=>[{:discount_value=>"50", :threshold_value=>"0.0"}], :group_by=>"none", :dt=>"percentage", :product_rules=>[[{:c=>"variant.product.vendor", :rlt=>"ieq", :condition=>"Progenex"}]], :cr=>[[{:c=>"tags", :rlt=>"ieq", :condition=>"Administrator"}], [{:c=>"tags", :rlt=>"ieq", :condition=>"PRGNX Admin"}], [{:c=>"tags", :rlt=>"ieq", :condition=>"Shop Manager"}], [{:c=>"tags", :rlt=>"ieq", :condition=>"Team"}], [{:c=>"tags", :rlt=>"ieq", :condition=>"PRGNX Program"}]], :threshold_type=>"value", :dm=>"{{ discount_percentage }}% off!", :discount_code=>nil, :minimum_spend=>nil}).run(Input.cart);[].reduce(Input.cart.line_items.sort_by { |line_item| -line_item.variant.price }) do |eligible_line_items, campaign|;campaign.run(Input.cart, eligible_line_items);end;Output.cart = Input.cart;
